package com.DA2.songservice.service;

import com.DA2.songservice.client.AIServiceClient;
import com.DA2.songservice.entity.Song;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.Random;

/**
 * AI Service for analyzing songs
 * Integrates with Python AI Service (Flask) for real music analysis
 * Falls back to mock data if AI Service is unavailable
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class SongAIService {

    private final Random random = new Random();
    private final AIServiceClient aiServiceClient;

    /**
     * Analyze song audio file and extract musical features
     * Calls Python AI Service for real analysis
     */
    public Song.SongAnalysis analyzeSong(String fileUrl) {
        // Check if AI Service is available
        if (!aiServiceClient.isAvailable()) {
            log.warn("AI Service is not available, using mock analysis");
            return generateMockAnalysis();
        }
        
        try {
            log.info("Calling AI Service to analyze song: {}", fileUrl);
            
            // Call AI Service
            Map<String, Object> response = aiServiceClient.analyzeMusicFile(fileUrl);
            Map<String, Object> analysis = (Map<String, Object>) response.get("analysis");
            
            if (analysis != null) {
                log.info("AI Analysis successful for song: {}", fileUrl);
                
                return Song.SongAnalysis.builder()
                        .key((String) analysis.getOrDefault("key", "C Major"))
                        .tempo(((Number) analysis.getOrDefault("tempo", 120)).intValue())
                        .mood((String) analysis.getOrDefault("mood", "neutral"))
                        .energy(((Number) analysis.getOrDefault("energy", 0.5)).doubleValue())
                        .danceability(((Number) analysis.getOrDefault("danceability", 0.5)).doubleValue())
                        .copyrightDetected(false) // TODO: Implement copyright detection
                        .copyrightOwner(null)
                        .analyzedAt(LocalDateTime.now())
                        .build();
            } else {
                log.warn("AI Service returned empty analysis");
                return generateMockAnalysis();
            }
            
        } catch (Exception e) {
            log.error("Failed to call AI Service: {}", e.getMessage());
            return generateMockAnalysis();
        }
    }
    
    /**
     * Generate mock analysis as fallback
     */
    private Song.SongAnalysis generateMockAnalysis() {
        String[] keys = {"C Major", "C Minor", "D Major", "D Minor", "E Major", "E Minor", 
                        "F Major", "F Minor", "G Major", "G Minor", "A Major", "A Minor", 
                        "B Major", "B Minor"};
        String[] moods = {"happy", "sad", "energetic", "calm", "romantic", "melancholic", "upbeat"};
        
        return Song.SongAnalysis.builder()
                .key(keys[random.nextInt(keys.length)])
                .tempo(60 + random.nextInt(140)) // BPM: 60-200
                .mood(moods[random.nextInt(moods.length)])
                .energy(0.3 + random.nextDouble() * 0.7) // 0.3-1.0
                .danceability(0.2 + random.nextDouble() * 0.8) // 0.2-1.0
                .copyrightDetected(random.nextBoolean())
                .copyrightOwner(random.nextBoolean() ? "Unknown Label" : null)
                .analyzedAt(LocalDateTime.now())
                .build();
    }

    /**
     * Extract lyrics from audio using speech-to-text AI
     * In production: integrate with Whisper AI, Google Cloud Speech-to-Text, etc.
     */
    public String extractLyrics(String fileUrl) {
        // Simulate lyrics extraction - in production, call actual AI service
        return "Sample extracted lyrics from AI\n" +
               "This would be generated by speech-to-text AI\n" +
               "Such as OpenAI Whisper or Google Cloud Speech API";
    }

    /**
     * Detect copyright infringement using audio fingerprinting
     * In production: integrate with ACRCloud, Audible Magic, or similar services
     */
    public boolean detectCopyright(String fileUrl) {
        // Simulate copyright detection - in production, call actual fingerprinting service
        return random.nextBoolean();
    }

    /**
     * Generate auto-synced lyrics with timestamps
     * In production: use forced alignment algorithms
     */
    public java.util.List<Song.LyricLine> generateSyncedLyrics(String fileUrl, String lyrics) {
        // Simulate synced lyrics generation - in production, use forced alignment
        java.util.List<Song.LyricLine> syncedLyrics = new java.util.ArrayList<>();
        String[] lines = lyrics.split("\n");
        long timestamp = 0;
        
        for (String line : lines) {
            syncedLyrics.add(Song.LyricLine.builder()
                    .timestamp(timestamp)
                    .text(line.trim())
                    .build());
            timestamp += 3000 + random.nextInt(2000); // 3-5 seconds per line
        }
        
        return syncedLyrics;
    }
}
